## Priorities

* Complete r4ds-1 yourself. 9/27

* Complete r4ds-2 yourself. 9/25

* Complete r4ds-3 yourself. 9/26

* Complete r4ds-4 yourself. 9/28

* Complete r4ds-5 yourself. 9/29

* Complete tidycensus-1 yourself. 9/30

Tutorial times from 2025

# A tibble: 7 Ã— 3
  source                minutes     N
  <fct>                   <dbl> <int>
1 01-code_answers          119     68
2 02-quarto_answers         90     50
3 03-terminal_answers      112.    46
4 04-github-1_answers      120     53
5 05-github-2_answers       60     44
6 06-websites-1_answers     60     39
7 07-websites-2_answers    120     33

Update images in 01-code.

Should longer tutorials like 1, 4 and 7 have one of their exercises removed?



* Finish skeleton in tutorial.helpers

* Create function for downloading data from extdata on GitHub and installing the relevant data in the correct data directory. Really want to put this package on CRAN! Or maybe we just ensure that each student downloads the data by hand.

* Finish "Tutorials in the Age of AI" in tutorial.helpers.

* Rewrite "Instructions"



* Do we need an AI Getting Started tutorial which would highlight things like don't use install.packages() in your scripts and other generic lessons for working with AI?




# Introductions

This package will hold all of our new breed AI tutorials.


## Plan for R4DS


### R4DS tutorial structure

The introduction and summary are like any AI tutorial: Github, GH Pages and so on.

There are 3 to 5 Sections, each begins with some data processing and/or manipulation, questions which cover the important packages and functions in the relevant chapters. 

### Data storage

Most R4DS tutorials require the use of some strange data structures, like arrow files, spreadsheets and what not. We want to maintain our own copies of those starter files, even though they originally come from the web somewhere. 

* These are stored in the `data` directory of the tutorial in which they are used. 

* Document where these files come from in a brief note in `inst/extdata/README.txt`. (Maybe this should be elsewhere?) Or maybe there should be a .R script which recreates the files in that directory? Then, if you want to use the new ones, you move them over by hand to the relevant data directory.

* The files should be much less than 100 megabytes each because we want students to be able to easily download them and back them up in their personal repos.

* The big problem is that if we keep the datasets in the `data` directories, then we can't put the package on CRAN because it will be too big. Solution? Maybe we just keep all the data in extdata, then there is a script which downloads the files and puts them in the correct `data` directories. That script might be run by hand, sort of like the script which sets up tinytex. Appropriate checks would then need to be added to the tutorials so that they might report if the data is not there.



Does source'ing a script work on Postitron?

* Revisit Description

* Keep package help page and README page in sync better.

* What do we do with skeleton.Rmd in tutorial.helpers package?

* Posit introduction website has a better image for naming elements of the screen.

* Add Positron Assistant introduction.

* Add how to delete a repo, and then delete one of the ones you made.

For when we revisit the details of the terminal: https://code.visualstudio.com/docs/terminal/basics

Windows and the Terminal; see below.

Add images for early tutorials, especially pictures of the Terminal.


## Things to do earlier

In total, we make 5 websites. We need to make their construction more consistent, making things simpler in the initial ones and more complex, with more skipped steps, in later ones. Students will probably be doing all these within a day or two.

## Other items

teach use()

Any reason to make the Tutorial descriptions longer, like a full sentence or two? Use Grok to provide one sentence descriptions for each tutorial, and then use that description in two places: the file itself and the home page of the package.

If we ever redo the images, make sure to delete the Positron default welcome page first, but only if this is no longer shown by default. I think it is when you start up but not in a new Window.

Any reason to explore the Visual editor?

To shrink the size of all the PNG files, do:

find . -type f -name "*.png" -exec pngquant "{}" -o "{}" --force \;


 ## AI Links

Apparently, there is active work on a Positron Assistant. 

https://ellmer.tidyverse.org/
https://www.tidyverse.org/blog/2025/01/experiments-llm/
https://www.youtube.com/watch?v=RBTl94xeKqg
https://drmowinckels.io/blog/2025/ollama/
https://www.seascapemodels.org/rstats/2025/03/15/LMs-in-R-with-ellmer.html

## Windows and the Terminal

Does the Git Bash hack really work? I only do this in settings.json:

"terminal.integrated.defaultProfile.windows": "Git Bash"

But note this (from I don't know where):

{
  "terminal.integrated.profiles.windows": {
    "RTools Bash": {
      "path": "C:\\rtools45\\usr\\bin\\bash.exe",
      "args": ["--login"]
    }
  },
  "terminal.integrated.defaultProfile.windows": "RTools Bash"
}

Check with Sophia on this. Maybe what I have works because, even without it, installing Git Bash seems to add Git Bash to the set of choices from `+`, then add Terminal button. If so, all we need to change is the default. But then maybe just changing the default to RTools Bash is enough, since RTools also installs its own bash, and it also seems to be available from the `+`.

So, maybe just adding the default is enough, even before we install either Rtools or Git, just as we define the files.dialog.defaultPath before we have created the `projects` directory.

Understand fully how Windows will work in the terminal in Positron, at least for modern window shells.


## Other tutorials

Maybe an Advanced Positron tutorial? Covers topics like multiple Terminals and Consoles. Advanced Git/GitHub trickery, especially for when the Git history is rich. Branching

Add tutorial about ellmer and other AI issues.

Add a tutorial about working with large, complex projects? Each topic would involve forking an already existing project and then making a bunch of changes, perhaps including getting the raw data.

Maybe we need another tutorial about putting large projects together. Might cover things like the **here** package. Cover material in book titled something like R Stuff that it is not in the manual.

Maybe a different tutorial which walked through a bunch of different Quarto project types, not because we are especially interested in Dashboards, but because we want to give students more practice dealing with projects with lots of different files doing different things.

What they forgot to teach you tutorial: https://rstats.wtf/

## For Later

What about Chromebooks??!! Too much to worry about. 

We could do all the example repos in PPBDS and then leave them up forever, so they would be available to students doing the work.

